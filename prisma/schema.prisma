// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  password    String
  name        String?
  role        Role         @default(USER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  sessions    Session[]
  notes       Note[]       // Notes created by user
  sharedNotes SharedNote[] // Notes shared with user
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friends     UserFriend[] @relation("UserFriends")
  friendOf    UserFriend[] @relation("FriendOf")
  webhooks    Webhook[]

  @@index([email])
  @@index([role])
}

model Session {
  id           String   @id @default(uuid())
  token        String   @unique
  refreshToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([expiresAt])
}

model Note {
  id          String       @id @default(uuid())
  title       String
  content     String       // HTML content from Flutter Quill
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  sharedWith  SharedNote[]

  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
}

model SharedNote {
  id        String   @id @default(uuid())
  noteId    String
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([noteId, userId])
  @@index([noteId])
  @@index([userId])
  @@index([createdAt])
}

model FriendRequest {
  id        String   @id @default(uuid())
  senderId  String
  sender    User     @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver  User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
  @@index([status])
}

model UserFriend {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friendId  String
  friend    User     @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model Webhook {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  url       String
  events    String[] // Array of event types to listen for
  secret    String   // Secret for signing webhook payloads
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}